{% comment %}
  sections/main-cart.liquid
  Shopping cart page
{% endcomment %}

<section class="cart-page">
  <div class="container">
    <h1 class="cart-title">Your Cart</h1>

    {% if cart.item_count > 0 %}
      <div class="cart-content">
        <!-- Cart Items -->
        <div class="cart-items">
          {% for item in cart.items %}
            <div class="cart-item" data-line="{{ forloop.index }}">
              <div class="item-image">
                {% if item.image %}
                  <img src="{{ item.image | img_url: 'medium' }}" alt="{{ item.title | escape }}">
                {% else %}
                  <img src="{{ 'trading-bot-suite.jpg' | asset_url }}" alt="{{ item.title | escape }}">
                {% endif %}
              </div>

              <div class="item-details">
                <h3 class="item-title">{{ item.product.title }}</h3>
                {% if item.variant.title != 'Default Title' %}
                  <p class="item-variant">{{ item.variant.title }}</p>
                {% endif %}
                
                {% if item.selling_plan_allocation %}
                  <div class="subscription-info">
                    <span class="subscription-badge">üìÖ Subscription</span>
                    <p class="subscription-name">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                  </div>
                {% endif %}

                <p class="item-price">{{ item.final_line_price | money }}</p>
              </div>

              <div class="item-quantity">
                <label for="quantity-{{ forloop.index }}">Quantity:</label>
                <input 
                  type="number" 
                  id="quantity-{{ forloop.index }}"
                  class="quantity-input"
                  value="{{ item.quantity }}" 
                  min="1"
                  data-line="{{ forloop.index }}"
                >
              </div>

              <div class="item-remove">
                <button class="remove-btn" data-line="{{ forloop.index }}">
                  Remove
                </button>
              </div>
            </div>
          {% endfor %}
        </div>

        <!-- Cart Summary -->
        <div class="cart-summary">
          <h2>Order Summary</h2>
          
          <div class="summary-line">
            <span>Subtotal:</span>
            <span class="subtotal">{{ cart.total_price | money }}</span>
          </div>

          {% if cart.cart_level_discount_applications.size > 0 %}
            {% for discount in cart.cart_level_discount_applications %}
              <div class="summary-line discount">
                <span>Discount ({{ discount.title }}):</span>
                <span>-{{ discount.total_allocated_amount | money }}</span>
              </div>
            {% endfor %}
          {% endif %}

          <div class="summary-line total">
            <span>Total:</span>
            <span class="total-price">{{ cart.total_price | money }}</span>
          </div>

          <p class="tax-note">Taxes and shipping calculated at checkout</p>

          <button type="button" class="checkout-btn" onclick="window.location.href='/checkout'">
            Proceed to Checkout
          </button>

          <a href="/" class="continue-shopping">
            ‚Üê Continue Shopping
          </a>
        </div>
      </div>
    {% else %}
      <div class="empty-cart">
        <p class="empty-message">Your cart is empty</p>
        <a href="/#pricing" class="return-btn">View Pricing Plans</a>
      </div>
    {% endif %}
  </div>
</section>

<style>
  .cart-page {
    padding: 60px 20px;
    background: linear-gradient(135deg, #0a0a0a 0%, #0d1b0d 100%);
    min-height: 70vh;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .cart-title {
    font-size: 2.5rem;
    color: #00ff41;
    margin-bottom: 40px;
    text-align: center;
    font-weight: 700;
  }

  .cart-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 40px;
  }

  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .cart-item {
    background: rgba(0, 255, 65, 0.03);
    border: 1px solid rgba(0, 255, 65, 0.2);
    border-radius: 15px;
    padding: 20px;
    display: grid;
    grid-template-columns: 100px 1fr auto auto;
    gap: 20px;
    align-items: center;
  }

  .item-image img {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 10px;
  }

  .item-title {
    color: white;
    font-size: 1.2rem;
    margin-bottom: 5px;
  }

  .item-variant {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    margin-bottom: 10px;
  }

  .subscription-info {
    margin: 10px 0;
  }

  .subscription-badge {
    background: rgba(0, 255, 65, 0.2);
    color: #00ff41;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .subscription-name {
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.9rem;
    margin-top: 5px;
  }

  .item-price {
    color: #00ff41;
    font-size: 1.2rem;
    font-weight: 700;
    margin-top: 10px;
  }

  .item-quantity label {
    display: block;
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    margin-bottom: 5px;
  }

  .quantity-input {
    width: 70px;
    padding: 8px;
    background: rgba(0, 255, 65, 0.05);
    border: 1px solid rgba(0, 255, 65, 0.3);
    border-radius: 8px;
    color: white;
    text-align: center;
  }

  .remove-btn {
    background: transparent;
    border: 1px solid rgba(255, 65, 65, 0.5);
    color: rgba(255, 65, 65, 0.8);
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .remove-btn:hover {
    background: rgba(255, 65, 65, 0.1);
    border-color: #ff4141;
    color: #ff4141;
  }

  .cart-summary {
    background: rgba(0, 255, 65, 0.03);
    border: 1px solid rgba(0, 255, 65, 0.2);
    border-radius: 15px;
    padding: 30px;
    height: fit-content;
    position: sticky;
    top: 20px;
  }

  .cart-summary h2 {
    color: #00ff41;
    font-size: 1.5rem;
    margin-bottom: 20px;
  }

  .summary-line {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
    color: rgba(255, 255, 255, 0.8);
    font-size: 1rem;
  }

  .summary-line.discount {
    color: #00ff41;
  }

  .summary-line.total {
    border-top: 1px solid rgba(0, 255, 65, 0.3);
    padding-top: 15px;
    margin-top: 15px;
    font-size: 1.3rem;
    font-weight: 700;
    color: white;
  }

  .total-price {
    color: #00ff41;
  }

  .tax-note {
    color: rgba(255, 255, 255, 0.5);
    font-size: 0.85rem;
    margin: 15px 0 25px;
    text-align: center;
  }

  .checkout-btn {
    width: 100%;
    padding: 16px;
    background: linear-gradient(135deg, #00ff41, #00cc33);
    color: #000;
    border: none;
    border-radius: 10px;
    font-size: 1.1rem;
    font-weight: 700;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 255, 65, 0.4);
    margin-bottom: 15px;
  }

  .checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 255, 65, 0.6);
  }

  .continue-shopping {
    display: block;
    text-align: center;
    color: rgba(255, 255, 255, 0.6);
    text-decoration: none;
    font-size: 0.95rem;
    transition: color 0.3s ease;
  }

  .continue-shopping:hover {
    color: #00ff41;
  }

  .empty-cart {
    text-align: center;
    padding: 80px 20px;
  }

  .empty-message {
    color: rgba(255, 255, 255, 0.6);
    font-size: 1.3rem;
    margin-bottom: 30px;
  }

  .return-btn {
    display: inline-block;
    padding: 15px 40px;
    background: linear-gradient(135deg, #00ff41, #00cc33);
    color: #000;
    text-decoration: none;
    border-radius: 10px;
    font-weight: 700;
    transition: all 0.3s ease;
  }

  .return-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 255, 65, 0.6);
  }

  @media (max-width: 968px) {
    .cart-content {
      grid-template-columns: 1fr;
    }

    .cart-summary {
      position: static;
    }

    .cart-item {
      grid-template-columns: 80px 1fr;
      gap: 15px;
    }

    .item-quantity,
    .item-remove {
      grid-column: 2;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const quantityInputs = document.querySelectorAll('.quantity-input');
  quantityInputs.forEach(input => {
    input.addEventListener('change', function() {
      const line = this.dataset.line;
      const quantity = this.value;
      
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          line: line,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error updating quantity');
      });
    });
  });

  const removeButtons = document.querySelectorAll('.remove-btn');
  removeButtons.forEach(button => {
    button.addEventListener('click', function() {
      const line = this.dataset.line;
      
      if (confirm('Remove this item from cart?')) {
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line: line,
            quantity: 0
          })
        })
        .then(response => response.json())
        .then(data => {
          location.reload();
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error removing item');
        });
      }
    });
  });
});
</script>

<script>
(function() {
  console.log('Bot bundle script loaded');
  
  // Variant IDs - Updated with your actual IDs
  const BOT_MONTHLY = 7995703263412;
  const BOT_ANNUAL = 7995706015924;
  const SETUP_FEE = 7995945418932;
  
  function addSetupFee() {
    console.log('Attempting to add setup fee...');
    
    return fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        items: [{ id: SETUP_FEE, quantity: 1 }]
      })
    })
    .then(r => r.json())
    .then(data => {
      console.log('Setup fee added successfully');
      window.location.reload();
    })
    .catch(err => console.error('Error adding setup fee:', err));
  }
  
  function removeSetupFee(itemKey) {
    console.log('Removing setup fee...');
    
    return fetch('/cart/change.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: itemKey, quantity: 0 })
    })
    .then(r => r.json())
    .then(() => {
      console.log('Setup fee removed');
      window.location.reload();
    })
    .catch(err => console.error('Error removing setup fee:', err));
  }
  
  function checkCart() {
    console.log('Checking cart...');
    
    fetch('/cart.js')
      .then(r => r.json())
      .then(cart => {
        console.log('Cart has', cart.items.length, 'items');
        
        // Log each item for debugging
        cart.items.forEach(item => {
          console.log('- Item:', item.product_title, 'Variant ID:', item.variant_id);
        });
        
        const hasBotMonthly = cart.items.some(item => item.variant_id === BOT_MONTHLY);
        const hasBotAnnual = cart.items.some(item => item.variant_id === BOT_ANNUAL);
        const setupFeeItem = cart.items.find(item => item.variant_id === SETUP_FEE);
        const hasSetupFee = !!setupFeeItem;
        
        console.log('Bot Monthly:', hasBotMonthly);
        console.log('Bot Annual:', hasBotAnnual);
        console.log('Setup Fee:', hasSetupFee);
        
        const hasBotSubscription = hasBotMonthly || hasBotAnnual;
        
        if (hasBotSubscription && !hasSetupFee) {
          console.log('‚úÖ Bot subscription found, setup fee missing - adding now');
          addSetupFee();
        } else if (!hasBotSubscription && hasSetupFee) {
          console.log('‚ùå Setup fee found but no bot subscription - removing');
          removeSetupFee(setupFeeItem.key);
        } else if (hasBotSubscription && hasSetupFee) {
          console.log('‚úÖ Bundle complete - both items in cart');
        } else {
          console.log('‚ÑπÔ∏è No bot subscription in cart');
        }
      })
      .catch(err => console.error('Error checking cart:', err));
  }
  
  // Run on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkCart);
  } else {
    checkCart();
  }
})();
</script>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}